from loader import dp
from aiogram import types
from utils import vk_parser
import asyncio
import datetime
import json
import random
from filters.is_vk_link import Is_Vk_Link
from keyboards import search_result_keyboard

@dp.message_handler(Is_Vk_Link())
async def search_vk(message: types.Message):
    try:
        user_id = message.text.split('vk.com')[1].replace('/', '')
        user_data = vk_parser.get_user_data(user_id)
        if user_data['sex'] == 1:
            loading = await message.answer('<b>–ò–¥—ë—Ç –ø–æ–∏—Å–∫... üîé</b>')
            await asyncio.sleep(2)
            await loading.edit_text('<b>–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à–∏ –≤–∑–ª–æ–º—ã... ‚ôªÔ∏è</b>')
            await asyncio.sleep(2)
            await loading.edit_text('<b>–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à–∏ —Å–ª–∏–≤—ã... ‚ôªÔ∏è</b>')
            await asyncio.sleep(2)
            await loading.delete()
            start_date = datetime.date(2020, 1, 1)
            end_date = datetime.date(2020, 2, 1)
            time_between_dates = end_date - start_date
            days_between_dates = time_between_dates.days
            random_number_of_days = random.randrange(days_between_dates)
            random_date = start_date + datetime.timedelta(days=random_number_of_days)
            with open('data/prices.json') as json_file:
                prices = json.load(json_file)
            photo = user_data['photo']
            text = f'''<b>–í–∑–ª–æ–º –Ω–∞–π–¥–µ–Ω ‚úÖ</b>\n\n<b>id: </b>{user_data["id"]}\n<b>–ò–º—è: </b>{user_data["first_name"]}\n<b>–§–∞–º–∏–ª–∏—è: </b>{user_data["last_name"]}\n<b>–î–∞—Ç–∞ –≤–∑–ª–æ–º–∞: </b>{random_date}\n\n<b>–°–∫–∞—á–∞–Ω–æ –¥–∏–∞–ª–æ–≥–æ–≤: </b>{str(random.randint(30, 98))}\n<b>–ò–Ω—Ç–∏–º —Ñ–æ—Ç–æ: </b>–í –Ω–∞–ª–∏—á–∏–∏ ‚úÖ\n<b>–ò–Ω—Ç–∏–º –≤–∏–¥–µ–æ: </b>–í –Ω–∞–ª–∏—á–∏–∏ ‚úÖ'''
            text2 = f'''<b>{user_data["first_name"]} {user_data["last_name"]}</b> | {prices["Archive"]} <b>üá∑üá∫ RUB</b>\n\n<b>üóÇ –ê—Ä—Ö–∏–≤ –≤–∑–ª–æ–º–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–∂–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω. –í—Å–µ –¥–∏–∞–ª–æ–≥–∏ –∏ –≤–ª–æ–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≥–æ—Ç–æ–≤—ã –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ.</b>'''
            await message.answer_photo(photo, text)
            await message.answer(text2, reply_markup=search_result_keyboard.keyboard)
        else:
            loading = await message.answer('<b>–ò–¥—ë—Ç –ø–æ–∏—Å–∫... üîé</b>')
            await asyncio.sleep(2)
            await loading.edit_text('<b>–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à–∏ –≤–∑–ª–æ–º—ã... ‚ôªÔ∏è</b>')
            await asyncio.sleep(2)
            await loading.edit_text('<b>–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à–∏ —Å–ª–∏–≤—ã... ‚ôªÔ∏è</b>')
            await asyncio.sleep(2)
            await loading.edit_text('<b>‚ùå –í–∑–ª–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω</b>')
            await message.answer_sticker('CAACAgQAAxkBAAEC3SNhNkNNMD7XRzYZ6uhRnCsB3uNz8AACCQgAAiQWWVI_eK9jUmCxFSAE')
    except:
        await message.answer('<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É...</b>')